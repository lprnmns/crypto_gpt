// <auto-generated />
using System;
using BorsaGPT.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BorsaGPT.Api.Migrations
{
    [DbContext(typeof(BorsaGptDbContext))]
    partial class BorsaGptDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BorsaGPT.Api.Models.CandidateAnalysis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AdjustedReturn")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("adjusted_return");

                    b.Property<DateTime>("AnalyzedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("analyzed_at");

                    b.Property<long>("CandidateWalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("candidate_wallet_id");

                    b.Property<bool>("FundingHeavy")
                        .HasColumnType("boolean")
                        .HasColumnName("funding_heavy");

                    b.Property<decimal?>("NetCashFlowUsd")
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("net_cash_flow_usd");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<bool>("PriceMissing")
                        .HasColumnType("boolean")
                        .HasColumnName("price_missing");

                    b.Property<decimal?>("SimpleReturn")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("simple_return");

                    b.Property<bool>("StableHeavy")
                        .HasColumnType("boolean")
                        .HasColumnName("stable_heavy");

                    b.Property<long>("T0Block")
                        .HasColumnType("bigint")
                        .HasColumnName("t0_block");

                    b.Property<DateTime>("T0Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("t0_timestamp");

                    b.Property<long>("T1Block")
                        .HasColumnType("bigint")
                        .HasColumnName("t1_block");

                    b.Property<DateTime>("T1Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("t1_timestamp");

                    b.Property<int>("TokenCount")
                        .HasColumnType("integer")
                        .HasColumnName("token_count");

                    b.Property<decimal?>("ValueT0Usd")
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("value_t0_usd");

                    b.Property<decimal?>("ValueT1Usd")
                        .HasColumnType("decimal(28,8)")
                        .HasColumnName("value_t1_usd");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)")
                        .HasColumnName("wallet_address");

                    b.HasKey("Id");

                    b.HasIndex("AdjustedReturn")
                        .HasDatabaseName("ix_candidate_analysis_adjusted_return");

                    b.HasIndex("SimpleReturn")
                        .HasDatabaseName("ix_candidate_analysis_simple_return");

                    b.HasIndex("CandidateWalletId", "T0Timestamp", "T1Timestamp")
                        .IsUnique()
                        .HasDatabaseName("ix_candidate_analysis_unique_timeframe");

                    b.ToTable("candidate_analysis");
                });

            modelBuilder.Entity("BorsaGPT.Api.Models.CandidateWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Analyzed")
                        .HasColumnType("boolean")
                        .HasColumnName("analyzed");

                    b.Property<long>("BlockNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("block_number");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("detected_at");

                    b.Property<decimal?>("FirstTransferAmountEth")
                        .HasColumnType("decimal(28,18)")
                        .HasColumnName("first_transfer_amount_eth");

                    b.Property<string>("FirstTransferToken")
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)")
                        .HasColumnName("first_transfer_token");

                    b.Property<int?>("FirstTransferTokenDecimals")
                        .HasColumnType("integer")
                        .HasColumnName("first_transfer_token_decimals");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)")
                        .HasColumnName("wallet_address");

                    b.HasKey("Id");

                    b.HasIndex("Analyzed")
                        .HasDatabaseName("ix_candidate_wallets_analyzed");

                    b.HasIndex("BlockNumber")
                        .HasDatabaseName("ix_candidate_wallets_block_number");

                    b.HasIndex("DetectedAt")
                        .HasDatabaseName("ix_candidate_wallets_detected_at");

                    b.HasIndex("WalletAddress")
                        .IsUnique()
                        .HasDatabaseName("ix_candidate_wallets_wallet_address");

                    b.ToTable("candidate_wallets");
                });

            modelBuilder.Entity("BorsaGPT.Api.Models.CandidateAnalysis", b =>
                {
                    b.HasOne("BorsaGPT.Api.Models.CandidateWallet", "CandidateWallet")
                        .WithMany()
                        .HasForeignKey("CandidateWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateWallet");
                });
#pragma warning restore 612, 618
        }
    }
}
